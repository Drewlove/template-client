{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport config from \"../../Config\"; // import { useAuth0 } from \"@auth0/auth0-react\";\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state,\n        isLoading: true,\n        isLoaded: false,\n        isError: false\n      };\n\n    case \"FETCH_SUCCESS\":\n      return { ...state,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        data: action.payload\n      };\n\n    case \"FETCH_FAILURE\":\n      return { ...state,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        error: action.error\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nexport const API_GET = endpointArr => {\n  _s();\n\n  const [state, dispatch] = useReducer(dataReducer, {\n    isLoading: true,\n    isError: false,\n    error: {},\n    data: []\n  }); //   const { getAccessTokenSilently } = useAuth0();\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const getData = async () => {\n      if (endpointArr.length === 0) return dispatch({\n        type: \"FETCH_SUCCESS\",\n        payload: {}\n      });\n      dispatch({\n        type: \"FETCH_INIT\"\n      });\n      const urls = getUrls(endpointArr);\n      console.log(urls);\n\n      try {\n        if (!didCancel) {\n          //   const token = await getAccessTokenSilently();\n          const token = process.env.REACT_APP_API_KEY;\n          const responseArr = await fetchResponseArr(urls, token);\n          console.log(responseArr);\n          const dispatchObj = await getDispatchObj(responseArr);\n          dispatch(dispatchObj);\n        }\n      } catch (error) {\n        if (!didCancel) dispatch({\n          type: \"FETCH_FAILURE\",\n          error: {\n            status: \"NA\",\n            statusText: \"Failed to fetch resource\"\n          }\n        });\n      }\n    };\n\n    getData();\n    return () => {\n      didCancel = true;\n    };\n  }, [endpointArr //  getAccessTokenSilently\n  ]);\n  return [state, dispatch];\n};\n\n_s(API_GET, \"zRqaXczUvW+WNyAGPxL0InK+b4k=\");\n\n_c = API_GET;\n\nconst getUrls = endpointArr => {\n  let urlArr = endpointArr.map(key => {\n    let url = `${config.API_ENDPOINT}/${key}`;\n    return url;\n  });\n  return urlArr;\n};\n\nconst fetchResponseArr = async (urls, token) => {\n  const responseArr = await Promise.all(urls.map(url => {\n    return fetch(url, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }));\n  return responseArr;\n};\n\nconst getDispatchObj = async responseArr => {\n  let error = validateResponses(responseArr);\n\n  if (error.status) {\n    return {\n      type: \"FETCH_FAILURE\",\n      error: error\n    };\n  } else {\n    const data = await Promise.all(responseArr.map(res => res.json()));\n    return {\n      type: \"FETCH_SUCCESS\",\n      payload: data\n    };\n  }\n};\n\nconst validateResponses = responseArr => {\n  let error = {};\n  responseArr.forEach(key => {\n    if (!key.ok) {\n      error = {\n        status: key.status,\n        statusText: key.statusText\n      };\n    }\n  });\n  return error;\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"API_GET\");","map":{"version":3,"sources":["/Users/Drew/Projects/template-client/src/Utilities/APImethods/API_GET.js"],"names":["useEffect","useReducer","config","dataReducer","state","action","type","isLoading","isLoaded","isError","data","payload","error","Error","API_GET","endpointArr","dispatch","didCancel","getData","length","urls","getUrls","console","log","token","process","env","REACT_APP_API_KEY","responseArr","fetchResponseArr","dispatchObj","getDispatchObj","status","statusText","urlArr","map","key","url","API_ENDPOINT","Promise","all","fetch","method","headers","Authorization","validateResponses","res","json","forEach","ok"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,KAHL;AAILC,QAAAA,OAAO,EAAE;AAJJ,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGL,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,IAAI,EAAEL,MAAM,CAACM;AALR,OAAP;;AAOF,SAAK,eAAL;AACE,aAAO,EACL,GAAGP,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,QAAQ,EAAE,KAHL;AAILC,QAAAA,OAAO,EAAE,IAJJ;AAKLG,QAAAA,KAAK,EAAEP,MAAM,CAACO;AALT,OAAP;;AAOF;AACE,YAAM,IAAIC,KAAJ,EAAN;AAzBJ;AA2BD,CA5BD;;AA8BA,OAAO,MAAMC,OAAO,GAAIC,WAAD,IAAiB;AAAA;;AACtC,QAAM,CAACX,KAAD,EAAQY,QAAR,IAAoBf,UAAU,CAACE,WAAD,EAAc;AAChDI,IAAAA,SAAS,EAAE,IADqC;AAEhDE,IAAAA,OAAO,EAAE,KAFuC;AAGhDG,IAAAA,KAAK,EAAE,EAHyC;AAIhDF,IAAAA,IAAI,EAAE;AAJ0C,GAAd,CAApC,CADsC,CAOtC;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,SAAS,GAAG,KAAhB;;AAEA,UAAMC,OAAO,GAAG,YAAY;AAC1B,UAAIH,WAAW,CAACI,MAAZ,KAAuB,CAA3B,EACE,OAAOH,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAE,eAAR;AAAyBK,QAAAA,OAAO,EAAE;AAAlC,OAAD,CAAf;AAEFK,MAAAA,QAAQ,CAAC;AAAEV,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA,YAAMc,IAAI,GAAGC,OAAO,CAACN,WAAD,CAApB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AACA,UAAI;AACF,YAAI,CAACH,SAAL,EAAgB;AACd;AACA,gBAAMO,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA1B;AACA,gBAAMC,WAAW,GAAG,MAAMC,gBAAgB,CAACT,IAAD,EAAOI,KAAP,CAA1C;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYK,WAAZ;AACA,gBAAME,WAAW,GAAG,MAAMC,cAAc,CAACH,WAAD,CAAxC;AACAZ,UAAAA,QAAQ,CAACc,WAAD,CAAR;AACD;AACF,OATD,CASE,OAAOlB,KAAP,EAAc;AACd,YAAI,CAACK,SAAL,EACED,QAAQ,CAAC;AACPV,UAAAA,IAAI,EAAE,eADC;AAEPM,UAAAA,KAAK,EAAE;AAAEoB,YAAAA,MAAM,EAAE,IAAV;AAAgBC,YAAAA,UAAU,EAAE;AAA5B;AAFA,SAAD,CAAR;AAIH;AACF,KAvBD;;AAwBAf,IAAAA,OAAO;AACP,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GA/BQ,EA+BN,CACDF,WADC,CAED;AAFC,GA/BM,CAAT;AAmCA,SAAO,CAACX,KAAD,EAAQY,QAAR,CAAP;AACD,CA7CM;;GAAMF,O;;KAAAA,O;;AA+Cb,MAAMO,OAAO,GAAIN,WAAD,IAAiB;AAC/B,MAAImB,MAAM,GAAGnB,WAAW,CAACoB,GAAZ,CAAiBC,GAAD,IAAS;AACpC,QAAIC,GAAG,GAAI,GAAEnC,MAAM,CAACoC,YAAa,IAAGF,GAAI,EAAxC;AACA,WAAOC,GAAP;AACD,GAHY,CAAb;AAIA,SAAOH,MAAP;AACD,CAND;;AAQA,MAAML,gBAAgB,GAAG,OAAOT,IAAP,EAAaI,KAAb,KAAuB;AAC9C,QAAMI,WAAW,GAAG,MAAMW,OAAO,CAACC,GAAR,CACxBpB,IAAI,CAACe,GAAL,CAAUE,GAAD,IAAS;AAChB,WAAOI,KAAK,CAACJ,GAAD,EAAM;AAChBK,MAAAA,MAAM,EAAE,KADQ;AAEhBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASpB,KAAM,EADxB;AAEP,wBAAgB;AAFT;AAFO,KAAN,CAAZ;AAOD,GARD,CADwB,CAA1B;AAWA,SAAOI,WAAP;AACD,CAbD;;AAeA,MAAMG,cAAc,GAAG,MAAOH,WAAP,IAAuB;AAC5C,MAAIhB,KAAK,GAAGiC,iBAAiB,CAACjB,WAAD,CAA7B;;AACA,MAAIhB,KAAK,CAACoB,MAAV,EAAkB;AAChB,WAAO;AAAE1B,MAAAA,IAAI,EAAE,eAAR;AAAyBM,MAAAA,KAAK,EAAEA;AAAhC,KAAP;AACD,GAFD,MAEO;AACL,UAAMF,IAAI,GAAG,MAAM6B,OAAO,CAACC,GAAR,CAAYZ,WAAW,CAACO,GAAZ,CAAiBW,GAAD,IAASA,GAAG,CAACC,IAAJ,EAAzB,CAAZ,CAAnB;AACA,WAAO;AAAEzC,MAAAA,IAAI,EAAE,eAAR;AAAyBK,MAAAA,OAAO,EAAED;AAAlC,KAAP;AACD;AACF,CARD;;AAUA,MAAMmC,iBAAiB,GAAIjB,WAAD,IAAiB;AACzC,MAAIhB,KAAK,GAAG,EAAZ;AACAgB,EAAAA,WAAW,CAACoB,OAAZ,CAAqBZ,GAAD,IAAS;AAC3B,QAAI,CAACA,GAAG,CAACa,EAAT,EAAa;AACXrC,MAAAA,KAAK,GAAG;AACNoB,QAAAA,MAAM,EAAEI,GAAG,CAACJ,MADN;AAENC,QAAAA,UAAU,EAAEG,GAAG,CAACH;AAFV,OAAR;AAID;AACF,GAPD;AAQA,SAAOrB,KAAP;AACD,CAXD","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport config from \"../../Config\";\n// import { useAuth0 } from \"@auth0/auth0-react\";\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        isLoaded: false,\n        isError: false,\n      };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isLoaded: true,\n        isError: false,\n        data: action.payload,\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        isLoaded: false,\n        isError: true,\n        error: action.error,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const API_GET = (endpointArr) => {\n  const [state, dispatch] = useReducer(dataReducer, {\n    isLoading: true,\n    isError: false,\n    error: {},\n    data: [],\n  });\n  //   const { getAccessTokenSilently } = useAuth0();\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const getData = async () => {\n      if (endpointArr.length === 0)\n        return dispatch({ type: \"FETCH_SUCCESS\", payload: {} });\n\n      dispatch({ type: \"FETCH_INIT\" });\n      const urls = getUrls(endpointArr);\n      console.log(urls);\n      try {\n        if (!didCancel) {\n          //   const token = await getAccessTokenSilently();\n          const token = process.env.REACT_APP_API_KEY;\n          const responseArr = await fetchResponseArr(urls, token);\n          console.log(responseArr);\n          const dispatchObj = await getDispatchObj(responseArr);\n          dispatch(dispatchObj);\n        }\n      } catch (error) {\n        if (!didCancel)\n          dispatch({\n            type: \"FETCH_FAILURE\",\n            error: { status: \"NA\", statusText: \"Failed to fetch resource\" },\n          });\n      }\n    };\n    getData();\n    return () => {\n      didCancel = true;\n    };\n  }, [\n    endpointArr,\n    //  getAccessTokenSilently\n  ]);\n  return [state, dispatch];\n};\n\nconst getUrls = (endpointArr) => {\n  let urlArr = endpointArr.map((key) => {\n    let url = `${config.API_ENDPOINT}/${key}`;\n    return url;\n  });\n  return urlArr;\n};\n\nconst fetchResponseArr = async (urls, token) => {\n  const responseArr = await Promise.all(\n    urls.map((url) => {\n      return fetch(url, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n    })\n  );\n  return responseArr;\n};\n\nconst getDispatchObj = async (responseArr) => {\n  let error = validateResponses(responseArr);\n  if (error.status) {\n    return { type: \"FETCH_FAILURE\", error: error };\n  } else {\n    const data = await Promise.all(responseArr.map((res) => res.json()));\n    return { type: \"FETCH_SUCCESS\", payload: data };\n  }\n};\n\nconst validateResponses = (responseArr) => {\n  let error = {};\n  responseArr.forEach((key) => {\n    if (!key.ok) {\n      error = {\n        status: key.status,\n        statusText: key.statusText,\n      };\n    }\n  });\n  return error;\n};\n"]},"metadata":{},"sourceType":"module"}