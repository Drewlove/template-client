{"ast":null,"code":"var _jsxFileName = \"/Users/Drew/Projects/template-client/src/NavBar/NavBarLinksWrapper/NavBarLinksWrapper.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport NavBarLink from \"../NavBarLink/NavBarLink\";\nimport { useLocation } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function NavBarLinksWrapper() {\n  _s();\n\n  const navLinksAuthenticated = [{\n    to: \"/app/profile\",\n    text: \"Profile\"\n  }, {\n    to: \"/app/to-dos\",\n    text: \"To Do\"\n  }];\n  const navLinks = [{\n    to: \"/home\",\n    text: \"Home\"\n  }, {\n    to: \"/about\",\n    text: \"About\"\n  }];\n  let location = useLocation();\n  let {\n    isAuthenticated\n  } = useAuth0();\n\n  const hasCurrentPageClassName = path => {\n    let pathArr = path.split(\"/\");\n    let menuUrlPath = `/${pathArr[1]}/${pathArr[2]}`;\n    return location.pathname === menuUrlPath ? \"navbar__link_current-page\" : \"\";\n  };\n\n  const renderLinks = () => {\n    let links;\n    isAuthenticated ? links = navLinksAuthenticated : links = navLinks;\n    return links.map(key => {\n      return /*#__PURE__*/_jsxDEV(NavBarLink, {\n        to: key.to,\n        text: key.text,\n        isCurrentPage: hasCurrentPageClassName(key.to)\n      }, key.to, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderLinks()\n  }, void 0, false);\n}\n\n_s(NavBarLinksWrapper, \"Z3Bwaeoog/hG/MLztVWb5qgVsoc=\", false, function () {\n  return [useLocation, useAuth0];\n});\n\n_c = NavBarLinksWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavBarLinksWrapper\");","map":{"version":3,"sources":["/Users/Drew/Projects/template-client/src/NavBar/NavBarLinksWrapper/NavBarLinksWrapper.js"],"names":["React","NavBarLink","useLocation","useAuth0","NavBarLinksWrapper","navLinksAuthenticated","to","text","navLinks","location","isAuthenticated","hasCurrentPageClassName","path","pathArr","split","menuUrlPath","pathname","renderLinks","links","map","key"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;;;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AAC3C,QAAMC,qBAAqB,GAAG,CAC5B;AAAEC,IAAAA,EAAE,EAAE,cAAN;AAAsBC,IAAAA,IAAI,EAAE;AAA5B,GAD4B,EAE5B;AAAED,IAAAA,EAAE,EAAE,aAAN;AAAqBC,IAAAA,IAAI,EAAE;AAA3B,GAF4B,CAA9B;AAKA,QAAMC,QAAQ,GAAG,CACf;AAAEF,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,IAAI,EAAE;AAArB,GADe,EAEf;AAAED,IAAAA,EAAE,EAAE,QAAN;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAFe,CAAjB;AAKA,MAAIE,QAAQ,GAAGP,WAAW,EAA1B;AACA,MAAI;AAAEQ,IAAAA;AAAF,MAAsBP,QAAQ,EAAlC;;AAEA,QAAMQ,uBAAuB,GAAIC,IAAD,IAAU;AACxC,QAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;AACA,QAAIC,WAAW,GAAI,IAAGF,OAAO,CAAC,CAAD,CAAI,IAAGA,OAAO,CAAC,CAAD,CAAI,EAA/C;AACA,WAAOJ,QAAQ,CAACO,QAAT,KAAsBD,WAAtB,GAAoC,2BAApC,GAAkE,EAAzE;AACD,GAJD;;AAMA,QAAME,WAAW,GAAG,MAAM;AACxB,QAAIC,KAAJ;AACAR,IAAAA,eAAe,GAAIQ,KAAK,GAAGb,qBAAZ,GAAsCa,KAAK,GAAGV,QAA7D;AACA,WAAOU,KAAK,CAACC,GAAN,CAAWC,GAAD,IAAS;AACxB,0BACE,QAAC,UAAD;AAEE,QAAA,EAAE,EAAEA,GAAG,CAACd,EAFV;AAGE,QAAA,IAAI,EAAEc,GAAG,CAACb,IAHZ;AAIE,QAAA,aAAa,EAAEI,uBAAuB,CAACS,GAAG,CAACd,EAAL;AAJxC,SACOc,GAAG,CAACd,EADX;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATM,CAAP;AAUD,GAbD;;AAeA,sBAAO;AAAA,cAAGW,WAAW;AAAd,mBAAP;AACD;;GApCuBb,kB;UAWPF,W,EACWC,Q;;;KAZJC,kB","sourcesContent":["import React from \"react\";\nimport NavBarLink from \"../NavBarLink/NavBarLink\";\nimport { useLocation } from \"react-router-dom\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nexport default function NavBarLinksWrapper() {\n  const navLinksAuthenticated = [\n    { to: \"/app/profile\", text: \"Profile\" },\n    { to: \"/app/to-dos\", text: \"To Do\" },\n  ];\n\n  const navLinks = [\n    { to: \"/home\", text: \"Home\" },\n    { to: \"/about\", text: \"About\" },\n  ];\n\n  let location = useLocation();\n  let { isAuthenticated } = useAuth0();\n\n  const hasCurrentPageClassName = (path) => {\n    let pathArr = path.split(\"/\");\n    let menuUrlPath = `/${pathArr[1]}/${pathArr[2]}`;\n    return location.pathname === menuUrlPath ? \"navbar__link_current-page\" : \"\";\n  };\n\n  const renderLinks = () => {\n    let links;\n    isAuthenticated ? (links = navLinksAuthenticated) : (links = navLinks);\n    return links.map((key) => {\n      return (\n        <NavBarLink\n          key={key.to}\n          to={key.to}\n          text={key.text}\n          isCurrentPage={hasCurrentPageClassName(key.to)}\n        />\n      );\n    });\n  };\n\n  return <>{renderLinks()}</>;\n}\n"]},"metadata":{},"sourceType":"module"}